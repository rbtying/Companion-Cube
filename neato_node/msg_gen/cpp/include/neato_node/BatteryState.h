/* Auto-generated by genmsg_cpp for file /home/rbtying/robot/neato_node/msg/BatteryState.msg */
#ifndef NEATO_NODE_MESSAGE_BATTERYSTATE_H
#define NEATO_NODE_MESSAGE_BATTERYSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace neato_node
{
template <class ContainerAllocator>
struct BatteryState_ {
  typedef BatteryState_<ContainerAllocator> Type;

  BatteryState_()
  : header()
  , temperature(0)
  , charge(0)
  {
  }

  BatteryState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , temperature(0)
  , charge(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int8_t _temperature_type;
  int8_t temperature;

  typedef uint16_t _charge_type;
  uint16_t charge;


private:
  static const char* __s_getDataType_() { return "neato_node/BatteryState"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "9968bdc1f786266e986859d93e6edf78"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
int8 temperature\n\
uint16 charge\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, temperature);
    ros::serialization::serialize(stream, charge);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, temperature);
    ros::serialization::deserialize(stream, charge);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(temperature);
    size += ros::serialization::serializationLength(charge);
    return size;
  }

  typedef boost::shared_ptr< ::neato_node::BatteryState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neato_node::BatteryState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BatteryState
typedef  ::neato_node::BatteryState_<std::allocator<void> > BatteryState;

typedef boost::shared_ptr< ::neato_node::BatteryState> BatteryStatePtr;
typedef boost::shared_ptr< ::neato_node::BatteryState const> BatteryStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::neato_node::BatteryState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::neato_node::BatteryState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace neato_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::neato_node::BatteryState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::neato_node::BatteryState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::neato_node::BatteryState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9968bdc1f786266e986859d93e6edf78";
  }

  static const char* value(const  ::neato_node::BatteryState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9968bdc1f786266eULL;
  static const uint64_t static_value2 = 0x986859d93e6edf78ULL;
};

template<class ContainerAllocator>
struct DataType< ::neato_node::BatteryState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "neato_node/BatteryState";
  }

  static const char* value(const  ::neato_node::BatteryState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::neato_node::BatteryState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int8 temperature\n\
uint16 charge\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::neato_node::BatteryState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::neato_node::BatteryState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::neato_node::BatteryState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::neato_node::BatteryState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.temperature);
    stream.next(m.charge);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BatteryState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neato_node::BatteryState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::neato_node::BatteryState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "temperature: ";
    Printer<int8_t>::stream(s, indent + "  ", v.temperature);
    s << indent << "charge: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.charge);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NEATO_NODE_MESSAGE_BATTERYSTATE_H

