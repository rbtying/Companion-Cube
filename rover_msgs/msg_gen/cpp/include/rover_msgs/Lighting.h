/* Auto-generated by genmsg_cpp for file /home/rbtying/robot/rover_msgs/msg/Lighting.msg */
#ifndef ROVER_MSGS_MESSAGE_LIGHTING_H
#define ROVER_MSGS_MESSAGE_LIGHTING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rover_msgs
{
template <class ContainerAllocator>
struct Lighting_ {
  typedef Lighting_<ContainerAllocator> Type;

  Lighting_()
  : red_duty_cycle(0.0)
  , red_current(0.0)
  , green_duty_cycle(0.0)
  , green_current(0.0)
  , blue_duty_cycle(0.0)
  , blue_current(0.0)
  {
  }

  Lighting_(const ContainerAllocator& _alloc)
  : red_duty_cycle(0.0)
  , red_current(0.0)
  , green_duty_cycle(0.0)
  , green_current(0.0)
  , blue_duty_cycle(0.0)
  , blue_current(0.0)
  {
  }

  typedef float _red_duty_cycle_type;
  float red_duty_cycle;

  typedef float _red_current_type;
  float red_current;

  typedef float _green_duty_cycle_type;
  float green_duty_cycle;

  typedef float _green_current_type;
  float green_current;

  typedef float _blue_duty_cycle_type;
  float blue_duty_cycle;

  typedef float _blue_current_type;
  float blue_current;


private:
  static const char* __s_getDataType_() { return "rover_msgs/Lighting"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8466f8703abc19a467a2579c653659e8"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 red_duty_cycle\n\
float32 red_current\n\
float32 green_duty_cycle\n\
float32 green_current\n\
float32 blue_duty_cycle\n\
float32 blue_current\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, red_duty_cycle);
    ros::serialization::serialize(stream, red_current);
    ros::serialization::serialize(stream, green_duty_cycle);
    ros::serialization::serialize(stream, green_current);
    ros::serialization::serialize(stream, blue_duty_cycle);
    ros::serialization::serialize(stream, blue_current);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, red_duty_cycle);
    ros::serialization::deserialize(stream, red_current);
    ros::serialization::deserialize(stream, green_duty_cycle);
    ros::serialization::deserialize(stream, green_current);
    ros::serialization::deserialize(stream, blue_duty_cycle);
    ros::serialization::deserialize(stream, blue_current);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(red_duty_cycle);
    size += ros::serialization::serializationLength(red_current);
    size += ros::serialization::serializationLength(green_duty_cycle);
    size += ros::serialization::serializationLength(green_current);
    size += ros::serialization::serializationLength(blue_duty_cycle);
    size += ros::serialization::serializationLength(blue_current);
    return size;
  }

  typedef boost::shared_ptr< ::rover_msgs::Lighting_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::Lighting_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Lighting
typedef  ::rover_msgs::Lighting_<std::allocator<void> > Lighting;

typedef boost::shared_ptr< ::rover_msgs::Lighting> LightingPtr;
typedef boost::shared_ptr< ::rover_msgs::Lighting const> LightingConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rover_msgs::Lighting_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rover_msgs::Lighting_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rover_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rover_msgs::Lighting_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rover_msgs::Lighting_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::Lighting_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8466f8703abc19a467a2579c653659e8";
  }

  static const char* value(const  ::rover_msgs::Lighting_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8466f8703abc19a4ULL;
  static const uint64_t static_value2 = 0x67a2579c653659e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::Lighting_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rover_msgs/Lighting";
  }

  static const char* value(const  ::rover_msgs::Lighting_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::Lighting_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 red_duty_cycle\n\
float32 red_current\n\
float32 green_duty_cycle\n\
float32 green_current\n\
float32 blue_duty_cycle\n\
float32 blue_current\n\
\n\
";
  }

  static const char* value(const  ::rover_msgs::Lighting_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rover_msgs::Lighting_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rover_msgs::Lighting_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.red_duty_cycle);
    stream.next(m.red_current);
    stream.next(m.green_duty_cycle);
    stream.next(m.green_current);
    stream.next(m.blue_duty_cycle);
    stream.next(m.blue_current);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Lighting_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::Lighting_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rover_msgs::Lighting_<ContainerAllocator> & v) 
  {
    s << indent << "red_duty_cycle: ";
    Printer<float>::stream(s, indent + "  ", v.red_duty_cycle);
    s << indent << "red_current: ";
    Printer<float>::stream(s, indent + "  ", v.red_current);
    s << indent << "green_duty_cycle: ";
    Printer<float>::stream(s, indent + "  ", v.green_duty_cycle);
    s << indent << "green_current: ";
    Printer<float>::stream(s, indent + "  ", v.green_current);
    s << indent << "blue_duty_cycle: ";
    Printer<float>::stream(s, indent + "  ", v.blue_duty_cycle);
    s << indent << "blue_current: ";
    Printer<float>::stream(s, indent + "  ", v.blue_current);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_LIGHTING_H

