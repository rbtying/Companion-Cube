/*
 * Controller.h
 *
 *  Created on: Feb 21, 2011
 *      Author: rbtying
 */

#ifndef CONTROLLER_H_
#define CONTROLLER_H_

#include <WProgram.h>
#include "control_struct.h"
#include "sensors/Battery.h"
#include "libraries/Servo/Servo.h"

#define CMD_PACKET_INTERVAL 40 // 25 Hz
#define CMD_TIMEOUT 1000

struct robot_state {
	uint8_t servo_pan_val;
	uint8_t servo_tilt_val;
	int16_t batt_motor_voltage;
	int16_t batt_motor_current;
	int16_t gyro_yaw_rate;
	int16_t gyro_yaw_val;
	int16_t enc_left_speed;
	int16_t enc_right_speed;
	int32_t enc_left_count;
	int32_t enc_right_count;
	int16_t enc_left_conv;
	int16_t enc_right_conv;
	int8_t motor_left_val;
	int8_t motor_right_val;
	int16_t pid_left_proportional;
	int16_t pid_left_integral;
	int16_t pid_left_derivative;
	int16_t pid_left_setpoint;
	int16_t pid_right_proportional;
	int16_t pid_right_integral;
	int16_t pid_right_derivative;
	int16_t pid_right_setpoint;
};

typedef struct robot_state state;

class StateController {
public:
	StateController(control_data * ctrl, HardwareSerial * hws);
	void update();
	void robotStateToControl(robot_state * state, control_data * ctrl);
	void controlToRobotState(control_data * ctrl, robot_state * state);

	bool comm;

private:
	control_data * m_ctrl;
	robot_state * m_state;
	HardwareSerial * m_hws;

	bool m_poll;
	unsigned long m_lastUpdateTime, m_lastPacketSendTime;
	void sendDataPacket();
	void
	readDataPacket(uint8_t * contents, uint8_t length, robot_state * state);
	uint8_t checksum(uint8_t * contents, uint8_t length);
	char nextByte(unsigned long timeout);
};

#endif /* CONTROLLER_H_ */
